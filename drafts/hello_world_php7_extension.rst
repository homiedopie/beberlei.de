"Hello World" PHP 7 extension
=============================

As a PHP developer, you might have some curiosity about how a PHP extension
works, or you have some C/C++ code lying around that you want to expose
to your PHP application. PHP 7 extensions are not entirely different from
PHP 5 extensions, but the there are some significant differences that make
it much easier to write them.

..

    Writing a PHP extension for the Zend Engine 3 (PHP 7s core written in C)
    is not comparable to writting a simple program in C. From my own experience
    when I first got into extension development, the Zend Engine gives you a lot
    of building blocks and datastructures that you can't possibly get right as a
    first time C programmer and wouldn't want to write yourself.

..

    But this also means that picking up a book on C gives you very little advice on 

Naturally a Hello World is the first step we take in learning a new language
(C) and platform (Zend Engine 3, PHP7s core). This is a helpful step, because
the structure has changed in some tiny, but important details compared to PHP 5
extensions. 

Stripped of all the glue code, a Hello World as a PHP 7 extension is simple and
looks very familiar:

.. code-block:: c

    PHP_FUNCTION(helloworld)
    {
        php_printf("Hello World!");
    }

If you are familiar with C, then you can spot ``PHP_FUNCTION`` is a macro that
ultimately resolves to the equivalent of writing this C code, **which you don't
have to remember or write yourself, because the macro hides this abstraction
from you**. 

.. code-block:: c

    void zif_helloworld(zend_execute_data *execute_data, zval *return_value)
    {
        php_printf("Hello World!");
    }

If you are unfamiliar with C then macros can be best explained as a replace
functionty where a macro-string ``PHP_FUNCTION`` is replaced with the
previously defined contents recursively until all macros are resolved.

You will qiuckly find that Zend Engine uses a large amount of macros and
writing PHP extensions requires you to dive into them a lot. 

To get the Hello World code running, we have to dive into the required glue
code to get an extension running.

The PHP source code provides a helper script called ``ext_skel`` which can
generate the skeleton of an extension for you, but in this post I will write
the extension from scratch to avoid confusing you with unnecessary code.

You need to create a new folder for the extension and add a file ``config.m4``
with the following contents:

.. code-block:: c

    PHP_ARG_ENABLE(helloworld, whether to enable helloworld support, [  --enable-helloworld           Enable helloworld support])

    if test "$PHP_HELLOWORLD" != "no"; then
      PHP_NEW_EXTENSION(helloworld, helloworld.c, $ext_shared,, -DZEND_ENABLE_STATIC_TSRMLS_CACHE=1)
    fi

The ``m4`` file extension is for a macro processor language used in the
build-stack of PHP extensions. Both instructions ``PHP_ARG_ENABLE`` and
``PHP_NEW_EXTENSION`` are not important except for the first arguments which
define the name of the extension and the second argument to
``PHP_NEW_EXTENSION`` which contains a list of all C-files that should be
compiled into the extension.

I have listed a file ``helloworld.c`` to be compiled into the extension.
It will contain the ``PHP_FUNCTION(helloworld)`` shown above and a much larger
amount of extension glue code.

You should create this file ``helloworld.c`` now right next to the ``config.m4``:

    #ifdef HAVE_CONFIG_H
    #include "config.h"
    #endif

    #include "php.h"
    #include "php_helloworld.h"

    PHP_FUNCTION(helloworld)
    {
        php_printf("Hello World!");
    }

    PHP_MINIT_FUNCTION(helloworld)
    {
        return SUCCESS;
    }

    PHP_MSHUTDOWN_FUNCTION(helloworld)
    {
        return SUCCESS;
    }

    PHP_MINFO_FUNCTION(helloworld)
    {
    }

    const zend_function_entry helloworld_functions[] = {
        PHP_FE(helloworld,	NULL)
        PHP_FE_END
    };

    zend_module_entry helloworld_module_entry = {
        STANDARD_MODULE_HEADER,
        "helloworld",
        helloworld_functions,
        PHP_MINIT(helloworld),
        PHP_MSHUTDOWN(helloworld),
        NULL,
        NULL,
        PHP_MINFO(helloworld),
        PHP_HELLOWORLD_VERSION,
        STANDARD_MODULE_PROPERTIES
    };

    #ifdef COMPILE_DL_HELLOWORLD
    ZEND_GET_MODULE(helloworld)
    #endif

The first lines import dependencies via Cs include header system:

1. the ``config.h`` is generated by the build system and is the C-equivalent of
   a large list of feature flags provided by the build system.

2. The ``#include "php.h"`` line makes the core of the PHP/Zend Engine available to your extension as a dependency.

3. The last include of ``php_helloworld.h`` contains the public interface of
   your PHP extension and we still need to write this file to finish our first
   extension.

In its most simple version it contains the following lines:

.. code-block:: c

    #ifndef PHP_HELLOWORLD_H
    #define PHP_HELLOWORLD_H

    extern zend_module_entry helloworld_module_entry;
    #define phpext_helloworld_ptr &helloworld_module_entry

    #define PHP_HELLOWORLD_VERSION "0.1.0"

    #if defined(__GNUC__) && __GNUC__ >= 4
    #	define PHP_HELLOWORLD_API __attribute__ ((visibility("default")))
    #else
    #	define PHP_HELLOWORLD_API
    #endif

    #endif	/* PHP_HELLOWORLD_H */

And this is everything we need for now. To run our ``helloworld()`` php
function, you need to complete the following steps on your shell:

    phpize
    ./configure
    make
    php -dextension=./modules/helloworld.so -r "helloworld();"

For this to work, you need PHP and development headers installed as well as
GNU-C as compiler, make and autoconf.

This will run PHP from the command line print "Hello World" on your screen and quit.
The helloworld extension is loaded into PHP as a shared object via the
extension INI directive.

Lets take apart the glue code in ``helloworld.c``, I want to explain to you
what is happening. We have already looked at the includes and our
``PHP_FUNCTION(helloworld)``.

Next are three additional functions `PHP_MINIT_FUNCTION(helloworld)`,
`PHP_MSHUTDOWN_FUNCTION(helloworld)` and ``PHP_MINFO_FUNCTION(helloworld)``
that are necessary for the module lifecycle of the extension. We can ignore
them for now.

The extension goes on defining a variable``helloworld_functions`` that contains
a list of all the functions, in our case only the ``PHP_FE(helloworld, NULL)``
entry. The ``PHP_FE_END`` macro is necessary for glue code only reasons and you
can ignore it.

Every PHP extension must expose a pre-defined datastructure ``zend_module_entry``
that the helloworld extension defines in the lines before into a variable
``helloworld_module_entry``. The PHP core hooks into this datastructure to find
name, functions and all information to run the extension.

Surrounded by two macros ``STANDARD_MODULE_HEADER`` and
``STANDARD_MODULE_PROPERTIES`` that we don't need to get into, the second line
defines the extension name, followed by a reference to the
``helloworld_functions`` variable containing all the functions of this
extension on line three and followed by more glue code definitions.

``PHP_MINIT``, ``PHP_MSHUTDOWN`` and ``PHP_MINFO`` are macros that relate to
the PHP module lifecycle that I mentioned before and which is out of scope for this post.
The ``PHP_HELLOWORLD_VERSION`` constant is defined in ``php_helloworld.h" and
contains the current version of the extension.

Finally, the ``ZEND_GET_MODULE(helloworld)`` macro is responsible for generating the
required C code that registers the extensions public interface into the PHP
binary via a shared object. Without this line the shared object file cannot be
loaded into PHP.



.. author:: default
.. categories:: none
.. tags:: PHPExtension
.. comments::
